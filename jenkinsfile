pipeline{
    agent any
     environment {
        def scannerHome = tool 'sonarqube-scanner'
    }
    stages{
        stage("build"){
            steps{
                sh """
                ls -lrt
                mvn install
                """
            }
        }
        stage("Code Analysis"){
            steps {
                withSonarQubeEnv('sonar-jenkins') {
                    sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=spring-key -Dsonar.projectName=spring -Dsonar.sources=. -Dsonar.java.binaries=target/classes -Dsonar.sourceEncoding=UTF-8"
                }
            }
        }
         stage("Quality Gate") {
            steps {
                timeout(time: 3000, unit: 'MS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
          stage("Upload Artifacts"){
            steps{
                
                rtServer (
                        id: 'jfrog-server',
                        url: 'http://192.168.29.142:8082/artifactory/artifactory-build-info/',
                        username: 'admin',
                        password: 'Admin@123',
                        timeout: 300
                )
                rtUpload (
                    serverId: 'jfrog-server',
                    spec: '''{
                        "files": [
                            {
                            "pattern": "target/*.jar",
                            "target": "example-repo-local/spring-boot-hello-world/"
                            }
                        ]
                    }''',
                )
            }
        }
    }
    post{
        always
        {
            cleanWs()
        }
    }
}